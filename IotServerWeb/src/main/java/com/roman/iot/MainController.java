package com.roman.iot;

import java.sql.Timestamp;
import java.util.Map;
import java.util.Objects;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class MainController {

	// Private fields
	
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private RepositoryUser repositoryUser;
	  
    @Autowired
    private RepositoryDev repositoryDev; 
	
    @Autowired
    private RepositoryLogs repositoryLogs;
    
    @Autowired
    private RepositoryPlc repositoryPlace;
    
    @Autowired
    private JavaMailSender emailSender;
	   

   /************************************************************************
   * GET /user/create  --> Create a new user and save it in the database.
   * Create a new user with an auto-generated id and email and name as passed values.
   * Format:  /user/create?name=[name]&email=[email]&phone=[phone]&username=[username]&password=[password]
   * Example: http://127.0.0.1:8082/users/create?name=user&email=aaa@gmail.com&phone=0555555555&username=user&password=1111
   **************************************************************************/
    
    
  @RequestMapping("/users/create")
  @ResponseBody
  public String createUser(String name, String email, String phone, String username, String password) {
	  
    String userId = "";
    Integer signed = 1;  // signed now
    
    try {
      User user = new User(name,  email,  phone,  username,  password, signed);
      repositoryUser.save(user);
      userId = String.valueOf(user.getId());
    }
    catch (Exception ex) {
    	
      return "Error creating the user: " + ex.toString();
    }
    
    return "User succesfully created with id = " + userId;
  }
  
   
  
  /**************************************************
   * GET /user/delete  --> Delete the user having the passed id
   * Format:  /user/delete?id=[id]
   * Example: http://127.0.0.1:8082/user/delete?id=1
   **********************************************/
  @RequestMapping("/user/delete")
  @ResponseBody
  public String deleteUser(long id) {
	  
    try {
    	
      User user = new User(id);
      repositoryUser.delete(user);
      
    }
    catch (Exception ex) {
    	
      return "Error deleting the user:" + String.valueOf(id);
    }
    
    return "User succesfully deleted!";
  }
  
  
  /*********************************************************
   * GET /user/get-by-email  --> Return the id for the user having the passed
     email. 
   * Format: /user/get-by-email?email=[email]
   * Example: http://127.0.0.1:8082/user/get-by-email?email=email@email.com
   *********************************************************/
  @RequestMapping("/user/get-by-email")
  @ResponseBody
  public String getByEmail(String email) {
	  
    String userId = "";
    
    try {
    	
      User user = repositoryUser.findByEmail(email);
      userId = String.valueOf(user.getId());
    }
    catch (Exception ex) {
    	
      return "User not found";
    }
    
    return "The user id is: " + userId;
  }
  
   
  /***********************************************************************
   * GET /user/update_con  --> Update the email and the name for the user in the 
     database having the passed id
   * Format: /user/update_con?id=[id]&email=[email]&name=[name]&phone=[phone]
   * Example:  http://127.0.0.1:8082/user/update_con?id=1&name=user1&email=user@gmail.com&phone=0545554433
   *******************************************************************/
  @RequestMapping("/user/update_con")
  @ResponseBody
  public String updateUser_con(long id, String name, String email, String phone) {
	  
    try {
      User user = (User) repositoryUser.findById(id);
      user.setName(name);
      user.setEmail(email);
      user.setPhone(phone);
      repositoryUser.save(user);
    }
    catch (Exception ex) {
    	
      return "Error updating the user: " + ex.toString();
    }
     
    return "User succesfully updated!";
  }

  
  /******************************************************************
   * GET /user/update_access  --> Update the username and the password for the user in the 
     database having the passed id
   * Format: /user/update_access?id=[id]&user=[username]&pass=[password]
   * Example:  http://127.0.0.1:8082/user/update_access?id=1&username=absc&password=qwe
   ***********************************************************/
  @RequestMapping("/user/update_access")
  @ResponseBody
  public String updateUserAccess(long id, String username, String name, String password) {
	  
    try {
      User user = (User) repositoryUser.findById(id);
      user.setUsername(username); 
      user.setPassword(password); 
      repositoryUser.save(user);
    }
    catch (Exception ex) {
    	
      return "Error updating the user: " + ex.toString();
    }
    
    return "User succesfully updated!";
  }
    
  
  /************************************************************************
   * GET /place/create  --> Create a new place and save it in the database.
   * Create a new place with an auto-generated id and address and phone as passed values.
   * Format:  /places/create?address=[address]&phone=[phone]
   * Example: http://127.0.0.1:8082/places/create?address=Ashkelon&phone=0555555555
   **************************************************************************/
  @RequestMapping("/places/create")
  @ResponseBody
  public String createPlace(String address, long phone) {
	  
    String placeId = "";
    
    try {
      Places place = new Places(address, phone);
      repositoryPlace.save(place);
      placeId = String.valueOf(place.getId());
    }
    catch (Exception ex) {
    	
      return "Error creating the place: " + ex.toString();
    }
    
    return "Place succesfully created with id = " + placeId;
  }
  
  
  /**************************************************
   * GET /place/delete  --> Delete the place having the passed id
   * Format:  /places/delete?id=[id]
   * Example: http://127.0.0.1:8082/places/delete?id=1
   **********************************************/
  @RequestMapping("/places/delete")
  @ResponseBody
  public String deletePlace(long id) {
	  
    try {
    	
      Places place = new Places(id);
      repositoryPlace.delete(place);
      
    }
    catch (Exception ex) {
    	
      return "Place :" +id+"has a foreign key in another table";
    }
    
    return "Place succesfully deleted!";
  }
  
  
  /***********************************************************************
   * GET /place/update_con  --> Update the address and the phone for the place in the 
     database having the passed id
   * Format: /places/update?id=[id]&address=[address]&phone=[phone]
   * Example:  http://127.0.0.1:8082/places/update?id=1&address=Ashkelon&phone=0545554433
   *******************************************************************/
  @RequestMapping("/places/update")
  @ResponseBody
  public String updatePlace(long id, String address, long phone) {
	  
    try {
      Places place = (Places) repositoryPlace.findById(id);
      place.setAddress(address);
      place.setPhone(phone);
      repositoryPlace.save(place);
    }
    catch (Exception ex) {
    	
      return "Error updating the place: " + ex.toString();
    }
     
    return "Place succesfully updated!";
  }
  
  
  /***********************************************************************
   * GET /place/update_con  --> Clear the entire logs table in the database
   * Format: /logs/clear
   * Example:  http://127.0.0.1:8082/logs/clear
   *******************************************************************/
  @RequestMapping("/logs/clear")
  @ResponseBody
  public  String clearLogs() {
	  
	  try {
		  
		  repositoryLogs.clearTable();
		  
	  }catch(Exception e) {
		  
		  return "Error deleting logs table!"; 
	  }
	   
	  return "Logs table succesfully cleared!";
  }
  
  
  /*****************************************************************
   * POST /iot_device/connect  --> Connect IOT device to IOT server
   * @throws JSONException 
   *****************************************************************/
  @RequestMapping(value = "/iot_device/connect", method = RequestMethod.POST, produces = "application/json", consumes = "application/json")
  
  public @ResponseBody void connectIotDevice(@RequestBody Map<String, Object> payload) throws JSONException {
	  
	  JSONObject tomJsonObject = new JSONObject(payload);  
	  
	  String dev_id = tomJsonObject.getString("device_id");
	  System.out.println("Device ID: " + dev_id);
	  
	  String connect_state = tomJsonObject.getString("connect_state");
	  System.out.println("Connection state: " + connect_state);
	  
	  long dev_id_long = Long.parseLong(dev_id);
	  Devices device = repositoryDev.findById(dev_id_long);
	  
      Timestamp timestamp = new Timestamp(System.currentTimeMillis());
      
	  if (device != null)
	  {
          device.setDate_time(timestamp);
          Integer set_conn = (connect_state.compareTo("0") == 0) ? 0: 1;
		  System.out.println("Set connection state to :" + set_conn + "  @ " + timestamp);
		  device.setConnected(set_conn);
		  repositoryDev.save(device);
	  }
	  else
	  {
		  System.out.println("Can't find id=" + dev_id_long);
	  }
	  
	  // Save message from IoT device to logs messages table
      Logs log_message = new Logs(tomJsonObject.toString(), timestamp);
      repositoryLogs.save(log_message);
	  	  
	  return;
  }
 
  
  /*************************************************
   * POST /iot_device/update  --> Connect IOT device to IOT server
   * @throws JSONException 
   *************************************************/
  @RequestMapping(value = "/iot_device/update", method = RequestMethod.POST, produces = "application/json", consumes = "application/json")
  
  public @ResponseBody void updateIotDevice(@RequestBody Map<String, Object> payload) throws JSONException {
	  
	  JSONObject tomJsonObject = new JSONObject(payload);  
	  String email_message = "Hello,\nThis  is a message from an Iot Device:\n\n";
	  
	  String dev_id = tomJsonObject.getString("device_id");
	  System.out.println("Device ID: " + dev_id);
	  
	  String state_name1 = tomJsonObject.getString("state_name1");
	  System.out.println("State name 1: " + state_name1);
	  String state1 = tomJsonObject.getString("state1");
	  System.out.println("State 1: " + state1);

	  String state_name2="";
	  String state2="";
	  
      Timestamp timestamp = new Timestamp(System.currentTimeMillis());
      
	  try {
		  
		  state_name2 = tomJsonObject.getString("state_name2");
		  System.out.println("State name 2: " + state_name2);
		  state2 = tomJsonObject.getString("state2");
		  System.out.println("State 2: " + state2);
	  } catch (Exception e) {
		  
		  System.out.println(e.getMessage());
		  state_name2 = "N/A";
		  state2 = "N/A";
	  } finally {
		  
		  long dev_id_long = Long.parseLong(dev_id);
		  Devices device = repositoryDev.findById(dev_id_long);
		  
		  if (device != null)
		  {
			  Boolean flag_changed = false;
			  email_message += "Device Name: " + device.getName() + "\n";
			  String old_state = device.getCurr_state1();
			  
			  if (Objects.equals(old_state, state1) == false)
			  {
				  flag_changed = true;
				  email_message += "    " + device.getState1_name() + " has changed to " + state1 + "\n";
				  System.out.println("old state: " + device.getCurr_state1() + " new state: " + state1);
			  }
			  
			  old_state = device.getCurr_state2();
			  
			  if (Objects.equals(old_state, state2) == false) 
			  {
				  flag_changed = true;
				  email_message += "    " + device.getState2_name() + " has changed to " + state2 + "\n";
				  System.out.println("old state: " + device.getCurr_state2() + " new state: " + state2);
			  }

			  email_message += "\nThanks,\nIoT Service Center";

			  if (flag_changed == true) 
			  {
			      // Send email to a user 
			      User user = (User) repositoryUser.findById(device.getClient_ID());
							  			      
			      SimpleMailMessage message = new SimpleMailMessage(); 
			      message.setTo(user.getEmail()); 
			      message.setSubject("IoT Service Center Warning"); 
			      message.setText(email_message);
			      System.out.println(message);
			      emailSender.send(message);
			  }
 
	          device.setDate_time(timestamp);
			  device.setState1_name(state_name1);
			  device.setState2_name(state_name2);
			  device.setCurr_state1(state1);
			  device.setCurr_state2(state2);
			   
			  repositoryDev.save(device);
		  }
		  else
		  {
			  System.out.println("Can't find id=" + dev_id_long);
		  }
	  }

	  // Save message from IoT device to logs messages table
	  Logs log_message = new Logs(tomJsonObject.toString(), timestamp);
      repositoryLogs.save(log_message);	  	  
      
    return;
  }
}

